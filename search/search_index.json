{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Portf\u00f3lio T\u00e9cnico - Charles Paiva","text":"<p>Bem-vindo ao meu portf\u00f3lio t\u00e9cnico focado em Java, arquitetura de software e microservi\u00e7os.</p>"},{"location":"#projetos","title":"Projetos","text":"<ul> <li>Projeto 1</li> <li>Projeto 2</li> </ul>"},{"location":"#system-design-problems","title":"System Design Problems","text":"<ul> <li>Design a scheduled digital transaction system</li> <li>Design a Digital Wallet</li> </ul>"},{"location":"projetos/projeto1/","title":"Projeto 1 - Sistema de Pedidos","text":"<p>Descri\u00e7\u00e3o: Sistema de pedidos com microservi\u00e7os, Kafka e Docker.</p> <p>Tecnologias: Java, Spring Boot, Kafka, Docker</p> <p>Principais desafios: Escalabilidade, mensageria, toler\u00e2ncia a falhas.</p>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/","title":"Design a Scheduled Digital Transaction System","text":""},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#system-requirements","title":"System Requirements","text":""},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#functional","title":"Functional","text":"<p>Functional requirements describe what the system should do. Here are some suggested requirements for our system:</p> <ul> <li>Transaction Scheduling: Users should be able to schedule different types of transactions including one-time, recurring, and conditional payments.</li> <li>User Management: The system should manage user accounts including authentication, authorization, and password management.</li> <li>Notification System: Users should receive notifications regarding the status of their transactions, including successes and failures.</li> <li>Admin Panel: For back-end management, including transaction oversight and user account management.</li> <li>Reporting and Analytics: Generate reports for transactions, spotting trends, and tracking transaction history.</li> <li>Security Features: Ensure data encryption, secure data storage, and secure transmission protocols.</li> </ul>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#non-functional","title":"Non-Functional","text":"<p>Non-functional requirements describe how the system operates, underlining the quality attributes of the system:</p> <ul> <li>Scalability: The system must handle a high number of transactions and users without degradation of performance.</li> <li>Reliability: Achieve high availability with minimal downtime.</li> <li>Usability: Interface must be user-friendly for both end-users and administrators.</li> <li>Security: Implement robust security measures to protect against fraud and cyber threats.</li> <li>Performance: Transactions should be processed in a timely fashion, with real-time processing capabilities as needed.</li> <li>Maintainability: Code and systems should be designed for easy maintenance and future upgrades.</li> </ul>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#capacity-estimation","title":"Capacity Estimation","text":""},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#assumptions","title":"Assumptions","text":"<p>To estimate the system's capacity, we need to make a few assumptions about usage patterns and transaction volumes:</p> <ul> <li>Number of Users: Estimate the number of active users who will use the system. For instance, we might start with 100,000 active users.</li> <li>Transaction Frequency: Estimate how often these users will schedule transactions. Let\u2019s assume each user schedules 3 transactions monthly.</li> <li>Peak Load: Identify peak hours during which transaction volume might double.</li> </ul>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#calculation","title":"Calculation","text":"<p>Based on the above assumptions:</p> <ul> <li>Monthly transactions = 100,000 users \u00d7 3 transactions/user = 300,000 transactions per month.</li> <li>If we estimate peak hours to see 10% of daily transactions, then:</li> <li>Daily transactions = 300,000 transactions / 30 days \u2248 10,000 transactions.</li> <li>Peak hour transactions = 10% of daily transactions = 1,000 transactions in the peak hour.</li> </ul>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#system-requirements_1","title":"System Requirements","text":"<p>To handle these transactions smoothly:</p> <ul> <li>Database Operations: Capable of handling at least 50 writes per second during peak times (as transactions might involve multiple database interactions).</li> <li>Storage: Sufficient storage for user data, transaction logs, and backups. Assuming small metadata per transaction, storage should scale with user base and retention policy.</li> <li>Network Bandwidth: Ensure adequate bandwidth to support data transmission needs during peak loads.</li> </ul>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#api-design","title":"API Design","text":"<p>The APIs will be structured to facilitate core functionalities such as user management, transaction scheduling, and system administration.</p>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#user-authentication-api","title":"User Authentication API","text":"<p>Authenticate users and provide tokens for session management.</p> <pre><code>POST /api/auth\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"username\": \"user@example.com\",\n  \"password\": \"password123\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"token\": \"ey123.ey456.789xyz\"\n}\n</code></pre>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#schedule-transaction-api","title":"Schedule Transaction API","text":"<p>Schedule a new transaction for execution.</p> <pre><code>POST /api/transactions/schedule\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"user_id\": 1,\n  \"amount\": 100.00,\n  \"currency\": \"USD\",\n  \"transaction_type\": \"one-time\",\n  \"scheduled_date\": \"2024-10-20\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"transaction_id\": 12345,\n  \"status\": \"scheduled\"\n}\n</code></pre>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#check-transaction-status-api","title":"Check Transaction Status API","text":"<p>Retrieve the status of a scheduled transaction.</p> <pre><code>GET /api/transactions/status?transaction_id=12345\n</code></pre> <p>Response:</p> <pre><code>{\n  \"transaction_id\": 12345,\n  \"status\": \"completed\",\n  \"execution_date\": \"2024-10-20\",\n  \"details\": \"Payment of $100 to account XYZ\"\n}\n</code></pre>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#admin-api-to-oversee-transactions","title":"Admin API to Oversee Transactions","text":"<p>View all transactions within the system for monitoring and management purposes.</p> <pre><code>GET /api/admin/transactions\n</code></pre> <p>Response:</p> <pre><code>{\n  \"transactions\": [\n    {\n      \"transaction_id\": 12345,\n      \"user_id\": 1,\n      \"status\": \"completed\",\n      \"amount\": 100.00,\n      \"currency\": \"USD\",\n      \"scheduled_date\": \"2024-10-20\"\n    }\n  ]\n}\n</code></pre>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#database-design","title":"Database Design","text":"<p>We will use a relational database model for our system. Here's a proposed Entity-Relationship (ER) diagram and corresponding descriptions:</p>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#entities-and-attributes","title":"Entities and Attributes","text":"<ul> <li>User: user_id, username, email, hashed_password, created_at</li> <li>Transaction: transaction_id, user_id, amount, currency, transaction_type, status, scheduled_date, executed_date</li> <li>Transaction_Log: log_id, transaction_id, status, timestamp, details</li> </ul>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#relationships","title":"Relationships","text":"<ul> <li>A User can have multiple Transactions (One-to-Many).</li> <li>A Transaction generates multiple Transaction_Logs (One-to-Many).</li> </ul> <pre><code>erDiagram\n    User ||--o{ Transaction : schedules\n    Transaction ||--o{ Transaction_Log : logs\n    User {\n        int user_id PK\n        string username\n        string email\n        string hashed_password\n        datetime created_at\n    }\n    Transaction {\n        int transaction_id PK\n        int user_id FK\n        float amount\n        string currency\n        string transaction_type\n        string status\n        date scheduled_date\n        date executed_date\n    }\n    Transaction_Log {\n        int log_id PK\n        int transaction_id FK\n        string status\n        datetime timestamp\n        string details\n    }\n</code></pre>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#high-level-design","title":"High-Level Design","text":"<p>The system architecture will be based on a microservices model to ensure scalability, maintainability, and robust fault isolation.</p>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#key-components","title":"Key Components","text":"<ul> <li>User Service</li> <li>Transaction Service</li> <li>Notification Service</li> <li>Admin Service</li> <li>Database</li> <li>API Gateway</li> <li>Load Balancer</li> </ul> <pre><code>graph TD\n    Client[Client] --&gt;|Request| AG[API Gateway]\n    AG --&gt; LB[Load Balancer]\n    LB --&gt;|Distribute Request| US[User Service]\n    LB --&gt;|Distribute Request| TS[Transaction Service]\n    LB --&gt;|Distribute Request| NS[Notification Service]\n    LB --&gt;|Distribute Request| AS[Admin Service]\n    US --&gt;|Read/Write| DB[(Database)]\n    TS --&gt;|Read/Write| DB\n    NS --&gt;|Read/Write| DB\n    AS --&gt;|Read/Write| DB\n    US --&gt;|Auth| Auth[Authentication Service]\n    DB --&gt;|Log Activity| Log[Logging Service]\n    DB --&gt;|Monitor DB| Mon[Monitoring Service]\n    Mon -.-&gt;|Alert| NS\n    Log -.-&gt;|Store Logs| ES[External Storage]\n    Auth --&gt;|Validate| Sec[Security Service]\n    Sec --&gt;|Token| AG\n</code></pre>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#request-flows","title":"Request Flows","text":"<p>Sequence diagram for a transaction scheduling flow:</p> <pre><code>sequenceDiagram\n    participant Client\n    participant API_Gateway as API Gateway\n    participant Load_Balancer as Load Balancer\n    participant Transaction_Service as Transaction Service\n    participant Database\n    participant Notification_Service as Notification Service\n    Client-&gt;&gt;+API_Gateway: Submit transaction request\n    API_Gateway-&gt;&gt;+Load_Balancer: Forward request\n    Load_Balancer-&gt;&gt;+Transaction_Service: Route request\n    Transaction_Service-&gt;&gt;+Database: Store transaction details\n    Database--&gt;&gt;-Transaction_Service: Confirm storage\n    Transaction_Service-&gt;&gt;+Notification_Service: Send notification (optional)\n    Notification_Service--&gt;&gt;-Transaction_Service: Confirm send\n    Transaction_Service--&gt;&gt;-API_Gateway: Return confirmation\n    API_Gateway--&gt;&gt;-Client: Display result\n</code></pre>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#detailed-component-design","title":"Detailed Component Design","text":""},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#transaction-service","title":"Transaction Service","text":"<ul> <li>Stateless, uses queues and priority execution.</li> <li>Scales horizontally.</li> </ul> <pre><code>graph TD\nTS[Transaction Service] --&gt;|Validate Input| Q[Queue Manager]\nTS --&gt;|Schedule Transactions| PQ[Priority Queue]\nTS --&gt;|Store Transaction| DB[Database]\nQ --&gt;|Dispatch to Queue| MQ[Message Queue]\nMQ --&gt;|Handle Execution| Executor[Transaction Executor]\nPQ --&gt;|Manage Order| Executor\nDB --&gt;|Retrieve/Update Status| TS\n</code></pre>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#notification-service","title":"Notification Service","text":"<ul> <li>Event-driven using a publish-subscribe pattern.</li> <li>Supports email and SMS.</li> </ul> <pre><code>graph TD\nNS[Notification Service] --&gt;|Receive Event| MB[Message Broker]\nNS --&gt;|Generate Notification| TE[Template Engine]\nMB --&gt;|Distribute Events| Worker[Notification Worker]\nWorker --&gt; TE\nTE --&gt;|Create Message| SM[Send Message]\nSM --&gt;|Email/SMS| Channels[Notification Channels]\n</code></pre>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#trade-offs-tech-choices","title":"Trade-offs / Tech Choices","text":""},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#microservices-architecture","title":"Microservices Architecture","text":"<ul> <li>Pros: Scalability, maintainability.</li> <li>Cons: Complexity, consistency.</li> </ul>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#relational-database","title":"Relational Database","text":"<ul> <li>Pros: ACID, mature tech.</li> <li>Cons: Scalability limits.</li> </ul>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#message-queues","title":"Message Queues","text":"<ul> <li>Pros: Decoupling, reliability.</li> <li>Cons: Operational overhead.</li> </ul>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#event-driven-notifications","title":"Event-Driven Notifications","text":"<ul> <li>Pros: Real-time, scalable.</li> <li>Cons: Event consistency challenges.</li> </ul>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#technology-stack","title":"Technology Stack","text":"<ul> <li>Frontend: React or Angular</li> <li>Backend: Node.js or Java (Spring Boot)</li> <li>Database: PostgreSQL</li> <li>Queue: Kafka</li> <li>Load Balancer: Nginx / HAProxy</li> <li>Monitoring: Prometheus, ELK Stack</li> </ul>"},{"location":"system-design-problems/design-a-scheduled-digital-transaction-system/#future-improvements","title":"Future Improvements","text":"<ul> <li>Integrate ML for fraud detection.</li> <li>Use blockchain for transaction auditability.</li> <li>Service mesh for service-to-service communication.</li> <li>Advanced analytics and reporting.</li> </ul>"}]}